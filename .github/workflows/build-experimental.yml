name: Build experimental build

permissions:
  contents: write
  actions: read

on:
  workflow_dispatch:
  pull_request:
    types: [closed]
    branches:
      - dev

jobs:
  build_xm_experimental:
    if: github.event_name == 'workflow_dispatch' || (github.event_name == 'pull_request' && github.event.pull_request.merged == true)
    runs-on: windows-latest
    
    strategy:
      matrix:
        targetplatform: [x64]
        ChannelName: [Release]

    env:
      TAG_NAME: experimental
      RELEASE_NAME: Dev Build

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Setup Git
        run: |
          git config --global user.email "github-actions@example.com"
          git config --global user.name "GitHub Actions"

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 8.x # Adjust this version when updating to .NET 9

      - name: Restore dependencies
        run: dotnet restore "Xenia Manager/Xenia Manager.csproj"

      - name: Build
        run: dotnet build -c Release "Xenia Manager/Xenia Manager.csproj"

      - name: Test
        run: dotnet test "Xenia Manager/Xenia Manager.csproj"

      - name: Publish
        run: dotnet publish -c Release -r win-x64 --self-contained false /p:PublishSingleFile=true -o publish "Xenia Manager/Xenia Manager.csproj"

      - name: Package
        run: Compress-Archive -Path .\publish\* -DestinationPath .\xenia_manager_experimental.zip

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: xenia_manager_experimental
          path: ./xenia_manager_experimental.zip

      - name: Delete existing release
        id: delete_release
        run: |
          API_URL="https://api.github.com/repos/${{ github.repository }}/releases/tags/${TAG_NAME}"
          RESPONSE=$(curl -X GET -s -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" "$API_URL")
          RELEASE_ID=$(echo "$RESPONSE" | jq -r '.id')
          if [ "$RELEASE_ID" != "null" ]; then
            curl -X DELETE -s -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" "$API_URL"
          fi
        shell: bash

      - name: Delete existing tag
        id: delete_tag
        run: |
          git fetch --tags
          if git rev-parse --quiet --verify "$TAG_NAME"; then
            git tag -d $TAG_NAME
            git push --delete origin $TAG_NAME
          else
            echo "Tag '$TAG_NAME' not found locally."
          fi
        shell: bash

      - name: Create new release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ env.TAG_NAME }}
          release_name: ${{ env.RELEASE_NAME }}
          prerelease: true

      - name: Upload release asset
        id: upload_asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./xenia_manager_experimental.zip
          asset_name: xenia_manager_experimental.zip
          asset_content_type: application/zip

      - name: Delete all draft releases with experimental tag
        run: |
          API_URL="https://api.github.com/repos/${{ github.repository }}/releases"
          RESPONSE=$(curl -X GET -s -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" "$API_URL")
          echo "$RESPONSE" | jq -c '.[] | select(.draft == true and .tag_name == "experimental")' | while read -r release; do
            RELEASE_ID=$(echo "$release" | jq -r '.id')
            curl -X DELETE -s -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" "$API_URL/$RELEASE_ID"
          done
        shell: bash
